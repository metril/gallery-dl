start-github-runner-ubuntu:
    stage: build
    id_tokens:
        CI_JOB_ID_TOKEN:
            aud: https://vault.azureolympos.com
    image:
        name: hashicorp/vault:latest
        pull_policy: if-not-present
    before_script:
        - apk add --update curl && apk add jq && rm -rf /var/cache/apk/*
    script: |
        export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=gitlab-runner jwt=$CI_JOB_ID_TOKEN)"
        export RUNNER_MANAGEMENT_TOKEN="$(vault kv get -field=token gitlab/runner-management)"
        export TAILSCALE_OAUTH_CLIENT_ID="$(vault kv get -field=client_id tailscale/oauth)"
        export TAILSCALE_OAUTH_CLIENT_SECRET="$(vault kv get -field=client_secret tailscale/oauth)"
        export TAILSCALE_TAGS='tag:ci'
        export GITHUB_TOKEN="$(vault kv get -field=token github/developer)"
        response=$(curl --request POST --url "${GITLAB_ADDR}/api/v4/user/runners" --data "runner_type=project_type" --data "project_id=${CI_PROJECT_ID}" --data "tag_list=githubrunner-ubuntu-${CI_PROJECT_ID}-${CI_PIPELINE_IID}" --header "PRIVATE-TOKEN: ${RUNNER_MANAGEMENT_TOKEN}")
        export RUNNER_REGISTRATION_TOKEN=$(echo $response | jq -r '.token')
        curl -H "Authorization: token ${GITHUB_TOKEN}" \
        -H 'Accept: application/vnd.github.everest-preview+json' \
        "https://api.github.com/repos/${GITHUB_REPO}/actions/workflows/gitlab-runner-ubuntu.yaml/dispatches" \
        -d '{"ref": "main", "inputs": {"registration_token": "'${RUNNER_REGISTRATION_TOKEN}'", "private_token": "'${RUNNER_MANAGEMENT_TOKEN}'", "gitlab_url": "'${GITLAB_ADDR}'", "tailscale_oauth_client_id": "'${TAILSCALE_OAUTH_CLIENT_ID}'", "tailscale_oauth_client_secret": "'${TAILSCALE_OAUTH_CLIENT_SECRET}'", "tailscale_tags": "'${TAILSCALE_TAGS}'", "docker_image": "'docker:19.03.12'", "delete_runner": "true"}}'

# start-github-runner-windows:
#     stage: build
#     id_tokens:
#         CI_JOB_ID_TOKEN:
#             aud: https://vault.azureolympos.com
#     image:
#         name: hashicorp/vault:latest
#         pull_policy: if-not-present
#     before_script:
#         - apk add --update curl && rm -rf /var/cache/apk/*
#     script: |
#         export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=gitlab-runner jwt=$CI_JOB_ID_TOKEN)"
#         export TAILSCALE_OAUTH_CLIENT_ID="$(vault kv get -field=client_id tailscale/oauth)"
#         export TAILSCALE_OAUTH_CLIENT_SECRET="$(vault kv get -field=client_secret tailscale/oauth)"
#         export TAILSCALE_TAGS='tag:ci'
#         export GITHUB_TOKEN="$(vault kv get -field=token github/developer)"
#         export GITLAB_REGISTRATION_TOKEN="$(vault kv get -field=token gitlab/runner-registration)"
#         curl -H "Authorization: token ${GITHUB_TOKEN}" \
#         -H 'Accept: application/vnd.github.everest-preview+json' \
#         "https://api.github.com/repos/${GITHUB_REPO}/actions/workflows/gitlab-runner-windows.yaml/dispatches" \
#         -d '{"ref": "main", "inputs": {"registration_token": "'${GITLAB_REGISTRATION_TOKEN}'", "gitlab_url": "'${GITLAB_ADDR}'", "gitlab_runner_tag": "'githubrunner-windows-${CI_PROJECT_ID}-${CI_PIPELINE_IID}'", "tailscale_oauth_client_id": "'${TAILSCALE_OAUTH_CLIENT_ID}'", "tailscale_oauth_client_secret": "'${TAILSCALE_OAUTH_CLIENT_SECRET}'", "tailscale_tags": "'${TAILSCALE_TAGS}'", "docker_image": "'23-windowsservercore-1809'"}}'

# start-github-runner-macos:
#     stage: build
#     id_tokens:
#         CI_JOB_ID_TOKEN:
#             aud: https://vault.azureolympos.com
#     image:
#         name: hashicorp/vault:latest
#         pull_policy: if-not-present
#     before_script:
#         - apk add --update curl && rm -rf /var/cache/apk/*
#     script: |
#         export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=gitlab-runner jwt=$CI_JOB_ID_TOKEN)"
#         export TAILSCALE_OAUTH_CLIENT_ID="$(vault kv get -field=client_id tailscale/oauth)"
#         export TAILSCALE_OAUTH_CLIENT_SECRET="$(vault kv get -field=client_secret tailscale/oauth)"
#         export TAILSCALE_TAGS='tag:ci'
#         export GITHUB_TOKEN="$(vault kv get -field=token github/developer)"
#         export GITLAB_REGISTRATION_TOKEN="$(vault kv get -field=token gitlab/runner-registration)"
#         curl -H "Authorization: token ${GITHUB_TOKEN}" \
#         -H 'Accept: application/vnd.github.everest-preview+json' \
#         "https://api.github.com/repos/${GITHUB_REPO}/actions/workflows/gitlab-runner-macos.yaml/dispatches" \
#         -d '{"ref": "main", "inputs": {"registration_token": "'${GITLAB_REGISTRATION_TOKEN}'", "gitlab_url": "'${GITLAB_ADDR}'", "gitlab_runner_tag": "'githubrunner-macos-${CI_PROJECT_ID}-${CI_PIPELINE_IID}'", "tailscale_oauth_client_id": "'${TAILSCALE_OAUTH_CLIENT_ID}'", "tailscale_oauth_client_secret": "'${TAILSCALE_OAUTH_CLIENT_SECRET}'", "tailscale_tags": "'${TAILSCALE_TAGS}'", "docker_image": "'docker:19.03.12'"}}'

build:linux:
    stage: build
    id_tokens:
        CI_JOB_ID_TOKEN:
            aud: https://vault.azureolympos.com
    image: debian:latest
    before_script:
        - apt update
        - apt install curl wget gnupg lsb-release -y
        - curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        - chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
        - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        - curl -fsSL https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
        - echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/hashicorp.list
        - apt update
        - apt install gh vault python3-pip -y
    script:
        - pip install --break-system-packages requests requests[socks] yt-dlp pyinstaller
        - python3 scripts/pyinstaller.py
        - export VAULT_ADDR=https://vault.azureolympos.com
        - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=gitlab-runner jwt=$CI_JOB_ID_TOKEN)"
        - export GH_TOKEN="$(vault kv get -field=token github/developer)"
        - DATE=`TZ=":America/New_York" date +%Y-%m-%d_%H-%M`
        - TITLE=gallery-dl_${DATE}
        - gh repo clone metril/gallery-dl metril_gallery-dl
        - mv ./dist ./metril_gallery-dl/dist
        - cd metril_gallery-dl
        - gh release delete latest --yes
        - gh release create --latest --target master -t $TITLE latest ./dist/*
    # tags:
    #     - githubrunner-ubuntu-${CI_PROJECT_ID}-${CI_PIPELINE_IID}

# build:windows:
#     stage: build
#     image: python:3.11.1-windowsservercore-1809
#     script:
#         - pip install requests requests[socks] yt-dlp pyinstaller
#         - python scripts/pyinstaller.py
#     tags:
#         - githubrunner-windows-${CI_PROJECT_ID}-${CI_PIPELINE_IID}

# build:macos:
#     stage: build
#     image: python:3.11
#     script:
#         - pip install requests requests[socks] yt-dlp pyinstaller
#         - python scripts/pyinstaller.py
#     tags:
#         - githubrunner-macos-${CI_PROJECT_ID}-${CI_PIPELINE_IID}
